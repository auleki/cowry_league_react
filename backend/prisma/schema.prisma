// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                          Int                     @id @default(autoincrement())
  firstname                   String
  lastname                    String
  email                       String?                 @unique
  dateJoined                  DateTime
  emailVerified               Boolean                 @default(false)
  emailVerifiedToken          String?
  emailVerifiedTokenExpiresAt DateTime?
  password                    String
  // pot          Pot[]    @relation("PotPlayers")
  games                       Game[]                  @relation("PlayersInGame")
  playerStats                 PlayerGameStats[]
  nairaBalance                Float                   @default(0) // Use Float for numbers with decimal points
  cowryBalance                Float                   @default(0) // Use Float for numbers with decimal points
  CowryTransactions           CowryTransactions[]
  NairaFiatTransactions       NairaFiatTransactions[]
  createdAt                   DateTime                @default(now())
  updatedAt                   DateTime                @updatedAt @default(now())
}

model Pot {
  id                 Int      @id @default(autoincrement())
  // player             Player[] @relation("PotPlayers")
  potFee             Float // Use Float for numeric values
  potOpen            DateTime // Required field for when the pot opens
  potClose           DateTime // Required field for when the pot closes
  potPrice           Float    @default(0)
  initialCowryReward Float    @default(100)
  highestCowryReward Float    @default(1000) // reward per balloon click can change based on a number of conditions
  game               Game[]   @relation("CurrentPot")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt @default(now())
}

model Game {
  id            Int               @id @default(autoincrement())
  potId         Int
  pot           Pot               @relation("CurrentPot", fields: [potId], references: [id], onDelete: Cascade)
  players       Player[]          @relation("PlayersInGame")
  playerStats   PlayerGameStats[]
  gameover      Boolean           @default(false)
  startDate     DateTime
  endDate       DateTime
  totalWin      Float             @default(0)
  minimalReward Float             @default(100)
  maxReward     Float             @default(1000)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt @default(now())
}

model PlayerGameStats {
  id                  Int       @id @default(autoincrement())
  game                Game      @relation(fields: [gameId], references: [id])
  gameId              Int
  player              Player    @relation(fields: [playerId], references: [id])
  playerId            Int
  popsEarned       Float     @default(0)
  livesLeft           Int       @default(3)
  maxLives            Int       @default(3)
  lastCooldownStartAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt @default(now())

  @@unique([gameId, playerId])
}

model Cowry {
  id             Int                 @id @default(autoincrement())
  name           String              @default("Cowry")
  totalSupply    Int                 @default(0)
  transactions   CowryTransactions[]
  withdrawalRate Float               @default(0.88)
  rateToNaira    Float               @default(10)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt @default(now())
  @@map("cowry")
}

model CowryTransactions {
  id              Int      @id @default(autoincrement())
  player          Player   @relation(fields: [playerId], references: [id])
  playerId        Int
  amount          Float
  transactionType String // 'deposit', 'win', 'spend' 'cashout'
  referenceId     String
  cowry           Cowry    @relation(fields: [cowryId], references: [id])
  cowryId         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  @@map("cowry_transactions")
}

model NairaFiatTransactions {
  id               Int      @id @default(autoincrement())
  playerId         Int
  player           Player   @relation(fields: [playerId], references: [id])
  amount           Float
  reference        String
  accessCode       String
  authorizationUrl String
  transactionType  String // 'deposit', 'win', 'spend' 'cashout'
  status           String // "pending" | "successful" | "failed" 
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
}
